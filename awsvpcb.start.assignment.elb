# Create ELBs  
#
$AWSCLI_HOME/procs/log "Starting ELB create process...."

input="$AWSCLI_HOME/tempfiles/assignment.ELBs"
while read -r c protocol port iprotocol iport subnet target interval timeout uthreshold hthreshold
do
   if [ "$c" == "#" ]; then
      continue
   elif [ "$c" == "" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - empty line - skipping....."
      continue
   elif [ "$protocol" == "-" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - protocol not provided - defaulting to HTTPS..."
      protocol="HTTPS"
   elif [ "$port" == "-" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - port not provided - defaulting to 443...."
      port="443"
   elif [ "$iprotocol" == "-" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - instance protocol not provided - defaulting to HTTP...."
      iprotocol="HTTP"
   elif [ "$iport" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - instance port not provided - defaulting to 80...."
      port="80"
   elif [ "$subnet" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - subnet not provided - defaulting to ELB...."
      subnet="AWSVPCB_ELB"
   elif [ "$target" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - target not provided - defaulting to TCP:80...."
      target="TCP:80"
   elif [ "$interval" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - interval not provided - defaulting to 5...."
      interval="5"
   elif [ "$timeout" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - timeout not provided - defaulting to 3...."
      timeout="3"
   elif [ "$uthreshold" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - unhealthy threshold not provided - defaulting to 2...."
      uthreshold="2"
   elif [ "$hthreshold" == "-"  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - healthy threshold not provided - defaulting to 2...."
      hthreshold="2"
   elif [ "$protocol" == "" ]; then
      $AWSCLI_HOME/procs/log "ERROR with ELB definition - protocol missing - please capture any output, zip up entire directory and send to professor for review..."
      exit 1
   elif [ "$port" == "" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - port missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$iprotocol" == "" ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - instance protocol missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$iport" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - instance port missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$subnet" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - subnet missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$target" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - target missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$interval" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - interval missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$timeout" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - timeout missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$uthreshold" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - unhealthy threshold missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   elif [ "$hthreshold" == ""  ]; then
      $AWSCLI_HOME/procs/log "Warning with ELB definition - healthy threshold missing - please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   fi

   cert=AWS-VPCB-${c}
   certid_var=AWSVPCB_${c}_CERTID
   elb_var=AWSVPCB_${c}_ELBDNS
   elb_subnet_var=${subnet}_SUBNETID
   elb_secgroup_var=${subnet}_SECGROUPID
   eval "elbdns=\${$elb_var}"
   eval "certid=\${$certid_var}"
   eval "subnetid=\${$elb_subnet_var}"
   eval "secgroupid=\${$elb_secgroup_var}"
   if [ "$elbdns" != "" ]; then
      $AWSCLI_HOME/procs/log "ELB $cert already registered - moving on (if certificate was deleted, then run AWSVPCB.VPC.REGISTER)...."
      exit
   fi
   if [ "$certid" = "" ]; then
      $AWSCLI_HOME/procs/log "SSL Certificate for ELB $cert is not registered - need to register with AWSVPCB.VPC.REGISTER or re-import; terminating process!!...."
      exit 1
   fi

   $AWSCLI_HOME/procs/clicall "elb create-load-balancer --load-balancer-name $cert --listeners Protocol=$protocol,LoadBalancerPort=$port,InstanceProtocol=$iprotocol,InstancePort=$iport,SSLCertificateId=$certid --subnets $subnetid --security-groups $secgroupid --scheme internal" "$AWSCLI_HOME/tempfiles/start.assignment.elb.1" "$AWSCLI_HOME/tempfiles/start.assignment.elb.1.error"
   if [ $? -ne 0 ]; then
      $AWSCLI_HOME/procs/log "Error creating ELB $cert in AWS -  please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   fi
   export json=`cat $AWSCLI_HOME/tempfiles/start.assignment.elb.1`
   export elbdns=`$AWSCLI_HOME/procs/json-read "DNSName:"` 
   if [ "$elbdns" != "" ]; then
      echo "export AWSVPCB_${c}_ELBDNS=$elbdns" >> $AWSCLI_HOME/procs/aws-dynamic-vars
      $AWSCLI_HOME/procs/log "ELB $cert created and registered...."
   else 
      $AWSCLI_HOME/procs/log "Error creating ELB $cert in AWS  -  please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   fi

   input2="$AWSCLI_HOME/tempfiles/assignment.elb.$c.instances"
   while read -r i
   do
      instance_var=AWSVPCB_${i}_ID
      eval "instance=\${$instance_var}"
      $AWSCLI_HOME/procs/clicall "elb register-instances-with-load-balancer --load-balancer-name $cert --instances $instance" "$AWSCLI_HOME/tempfiles/start.assignment.elb.2" "$AWSCLI_HOME/tempfiles/start.assignment.elb.2.error"
      if [ $? -ne 0 ]; then
         $AWSCLI_HOME/procs/log "Error registering instances to ELB $cert in AWS -  please capture any output, zip up entire directory and send to professor for review...."
         exit 1
      fi
   done < "$input2"


   $AWSCLI_HOME/procs/clicall "elb configure-health-check --load-balancer-name $cert --health-check Target=$target,Interval=$interval,Timeout=$timeout,UnhealthyThreshold=$uthreshold,HealthyThreshold=$hthreshold" "$AWSCLI_HOME/tempfiles/start.assignment.elb.4" "$AWSCLI_HOME/tempfiles/start.assignment.elb.4.error"
   if [ $? -ne 0 ]; then
      $AWSCLI_HOME/procs/log "Error setting up ELB $cert in AWS -  please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   fi

   $AWSCLI_HOME/procs/clicall "elb modify-load-balancer-attributes --load-balancer-name $cert --load-balancer-attributes AccessLog={Enabled=true,S3BucketName=$AWSVPCB_S3BUCKET,EmitInterval=5}" "$AWSCLI_HOME/tempfiles/start.assignment.elb.5" "$AWSCLI_HOME/tempfiles/start.assignment.elb.5.error"
   if [ $? -ne 0 ]; then
      $AWSCLI_HOME/procs/log "Error configuring ELB $cert in AWS -  please capture any output, zip up entire directory and send to professor for review...."
      exit 1
   fi
done < "$input"
